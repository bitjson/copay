{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/fcm/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,mBAAmB,CAAC;AACxC,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAc7C;IAA6B,2BAAG;IAAhC;;IA2DA,CAAC;IA1DG;;;;OAIG;IACH,0BAAQ,GAAR;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,gCAAc,GAAd;QACI,IAAI,QAAgB,CAAC;QACrB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,kCAAgB,GAAhB,UAAiB,KAAa;QAC1B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,sCAAoB,GAApB,UAAqB,KAAa;QAC9B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,gCAAc,GAAd;QACI,IAAI,QAA0B,CAAC;QAC/B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,cAAC;AAAD,CA3DA,AA2DC,CA3D4B,GAAG,GA2D/B","file":"index.js","sourceRoot":"","sourcesContent":["import { FCM } from '@ionic-native/fcm';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nexport interface NotificationData {\n    /**\n     * Determines whether the notification was pressed or not\n     */\n    wasTapped: boolean;\n    /**\n     * Notification data hash item\n     */\n    [name: string]: any;\n}\n\nexport class FCMMock extends FCM {\n    /**\n     * Get's device's current registration id\n     *\n     * @returns {Promise<string>} Returns a Promise that resolves with the registration id token\n     */\n    getToken(): Promise<string> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Event firing on the token refresh\n     *\n     * @returns {Observable<string>} Returns an Observable that notifies with the change of device's registration id\n     */\n    onTokenRefresh(): Observable<string> {\n        let response: string;\n        return Observable.create((observer: Observer<any>) => {\n            observer.next(response);\n            observer.complete();\n        });\n    };\n    /**\n     * Subscribes you to a [topic](https://firebase.google.com/docs/notifications/android/console-topics)\n     *\n     * @param {string} topic Topic to be subscribed to\n     *\n     * @returns {Promise<any>} Returns a promise resolving in result of subscribing to a topic\n     */\n    subscribeToTopic(topic: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Unubscribes you from a [topic](https://firebase.google.com/docs/notifications/android/console-topics)\n     *\n     * @param {string} topic Topic to be unsubscribed from\n     *\n     * @returns {Promise<any>} Returns a promise resolving in result of unsubscribing from a topic\n     */\n    unsubscribeFromTopic(topic: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Watch for incoming notifications\n     *\n     * @returns {Observable<any>} returns an object with data from the notification\n     */\n    onNotification(): Observable<NotificationData> {\n        let response: NotificationData;\n        return Observable.create((observer: Observer<any>) => {\n            observer.next(response);\n            observer.complete();\n        });\n    };\n}\n"]}